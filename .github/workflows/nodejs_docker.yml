name: cicd

on:
  push:
    branches:
      - dev
      - master

    tags:
      - v*

  pull_request:

env:
  IMAGE_NAME: frontend

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
      env:
        CI: true

    - name: test
      run: |
        if [ -f docker-compose.test.yml ]; then
          docker-compose --file docker-compose.test.yml build
          docker-compose --file docker-compose.test.yml run sut
        else
          docker build . --file Dockerfile
        fi

    - name: Build image
      run: docker build . --file Dockerfile --tag image
    
    - name: Log into registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

    - name: Push image
      run: |
        IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag image $IMAGE_ID:$VERSION
        docker tag image $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION

    - name: deploy
      uses: appleboy/ssh-action@master
      if: contains(github.ref, 'master')
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          echo ${{ secrets.SSH_PASSWORD }} | sudo su -
          cd /usr/share/nginx/wuhan-support
          docker-compose down
          docker-compose up -d --build
